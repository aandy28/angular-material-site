var app = angular.module('flickrApp', ['ui.router', 'ngMaterial', 'ngMessages', 'uiGmapgoogle-maps', 'me-lazyload']);

app.config(["$stateProvider", "$urlRouterProvider", "$locationProvider", function ($stateProvider, $urlRouterProvider, $locationProvider) {

    $urlRouterProvider.otherwise('/');

    $stateProvider.state("home", {
        url: "/",
        controller: "HomeCtrl",
        templateUrl: "views/home.html"
    });
    $stateProvider.state("about", {
        url: "/about",
        controller: "AboutCtrl",
        templateUrl: "views/about.html"
    });
    $stateProvider.state("contact", {
        url: "/contact",
        controller: "ContactCtrl",
        templateUrl: "views/contact.html"
    });
    $stateProvider.state("photoLocations", {
        url: "/photoLocations",
        controller: "PhotoLocationsCtrl",
        templateUrl: "views/photoLocations.html"
    });
    $stateProvider.state("gallery", {
        url: "/gallery?photosetid",
        controller: "GalleryCtrl",
        templateUrl: "views/gallery.html"
    });

    // use the HTML5 History API
    $locationProvider.html5Mode(true);

        // google api key AIzaSyAQ9IW7_K5YkfRX7FEqBi_qoSRbzFLP-Rg
}]);
app.factory('FlickrService', ['$http', '$sce' , function($http, $sce) {
    var url = "https://api.flickr.com/services/rest",
        apiKey = "5f1fc83583ecf2d1ba87d603691d3088",
        userId = "142517182@N04";
    return {
        getAlbums: (function(response) {
            return $http({
                method: 'GET',
                url: url,
                params: {
                    method: 'flickr.photosets.getList',
                    api_key: apiKey,
                    user_id: userId,
                    extras: 'date_upload',
                    format: 'json',
                    nojsoncallback: 1
                }
            }).then(function(response) {
                return response.data;
            });
        })(),

        getUserIcon: (
            function(response) {
                return $http({
                    method: 'GET',
                    url: url,
                    params: {
                        method: 'flickr.people.getInfo',
                        api_key: apiKey,
                        user_id: userId,
                        format: 'json',
                        nojsoncallback: 1
                    }
                }).then(function(response) {
                    return response.data;
                });
            })(),

        getAlbumPhotos: (function(albumId, response) {
            
            return $http({
                method: 'GET',
                url: url,
                params: {
                    method: 'flickr.photosets.getPhotos',
                    api_key: apiKey,
                    user_id: userId,
                    photoset_id: albumId,
                    format: 'json',
                    nojsoncallback: 1
                }
            }).then(function(response) {
                // console.log(response);
                
                return response.data;
            });
        })(),

        getAlbumLocation: (function(response) {
            var markers = [];
            return $http({
                method: 'GET',
                url: url,
                params: {
                    method: 'flickr.photosets.getList',
                    api_key: apiKey,
                    user_id: userId,
                    format: 'json',
                    nojsoncallback: 1
                }
            }).then(function(response) {
                var albumLat = null;
                var albumLong = null;
                for (var i = response.data.photosets.photoset.length - 1; i >= 0; i--) {
                    $http({
                        method: 'GET',
                        url: url,
                        params: {
                            method: 'flickr.photosets.getPhotos',
                            api_key: apiKey,
                            user_id: userId,
                            photoset_id: response.data.photosets.photoset[i].id,
                            has_geo: 1,
                            extras: 'geo',
                            format: 'json',
                            nojsoncallback: 1
                        }
                    }).then(function(dataPhoto) {

                        var ret = {
                            id: dataPhoto.data.photoset.id,
                            latitude: dataPhoto.data.photoset.photo[0].latitude,
                            longitude: dataPhoto.data.photoset.photo[0].longitude,
                            title: 'm' + dataPhoto.data.photoset.id
                        };

                        markers.push(ret);

                    });
                }

                return markers;
            });
        })()

    };
    return FlickrService;
}]);

(function(){
	app.service('myutils', myutils);
    myutils.$inject = ['$mdDialog', '$rootScope'];
    function myutils($mdDialog,  $rootScope){ 
     
     return {
       hideWait: hideWait,
       showWait: showWait
     }
     
     function hideWait(){
          setTimeout(function(){
                   $rootScope.$emit("hide_wait"); 
                },5);
      }
      
     function showWait(){
              $mdDialog.show({
                controller: 'waitCtrl',
                template: '<md-dialog id="plz_wait" style="background-color:transparent;box-shadow:none">' +
                            '<div layout="row" layout-sm="column" layout-align="center center" aria-label="wait">' +
                                '<md-progress-circular md-mode="indeterminate" ></md-progress-circular>' +
                            '</div>' +
                         '</md-dialog>',
                parent: angular.element(document.body),
                clickOutsideToClose:false,
                fullscreen: false
              })
              .then(function(answer) {
                
              });
       }
  
    }
})();
    app.controller('HomeCtrl', ['$scope', '$http', '$mdSidenav', '$state', 'FlickrService', 'myutils', function($scope, $http, $mdSidenav, $state, FlickrService, myutils) {
        $scope.results = [];
        $scope.userIcon = "";
        $scope.menuItems = [
            { name: 'about', path: 'about' },
            { name: 'contact', path: 'contact' },
            { name: 'photo locations', path: 'photoLocations' },
        ];

        $scope.go = function(path, title) {
            $state.go(path);
            $scope.title = title;
        };

        $scope.openLeftMenu = function() {
            $mdSidenav('left').toggle();
        };

        $scope.toggleLeft = function() {
            $mdSidenav('left').toggle();
        };

        $scope.menuIcon = 'menu';
        $scope.menuToggle = function() {
            if ($scope.menuIcon === 'menu') {
                $mdSidenav('left')
                    .open();
                $scope.menuIcon = 'arrow_back';
            } else {
                $mdSidenav('left')
                    .close();
                $scope.menuIcon = 'menu';
            }
        };

        $scope.max = $scope.results.length - 1;

        $scope.selectedIndex = 0;


        $scope.nextTab = function() {

            var index = ($scope.selectedIndex === $scope.max) ? 0 : $scope.selectedIndex + 1;
            $scope.selectedIndex = index;

        };

        $scope.prevTab = function() {

            var index = ($scope.selectedIndex === $scope.max) ? 0 : $scope.selectedIndex - 1;
            $scope.selectedIndex = index;



        };

        $scope.isSearching = false;

        FlickrService.getAlbums.then(function(data) {
            $scope.results = data;
            //console.log(data);
        });

        FlickrService.getUserIcon.then(function(data) {
            var iconFarm = data.person.iconfarm,
                iconServer = data.person.iconserver,
                nsid = data.person.nsid;
            $scope.userIcon = "http://farm" + iconFarm + ".staticflickr.com/" + iconServer + "/buddyicons/" + nsid + "_l.jpg";
        });


    }]);

app.controller('GalleryCtrl', ['$scope', '$http', '$stateParams', 'FlickrService', 'myutils', function($scope, $http, $stateParams, FlickrService, myutils) {
    $scope.results = [];
    $scope.allslides = [];
    $scope.photosetid = $stateParams.photosetid;

    // FlickrService.getAlbumPhotos($scope.photosetid).then(function(data){
    //     for (var i = data.photoset.photo.length - 1; i >= 0; i--) {

    //         var slide = {
    //             src: 'https://farm'+data.photoset.photo[i].farm+'.static.flickr.com/'+data.photoset.photo[i].server+'/'+data.photoset.photo[i].id+'_'+data.photoset.photo[i].secret+'_b.jpg',
    //             w:500,
    //             h:400,
    //             pid: data.photoset.photo[i].id
    //         };

    //         $scope.allslides.push(slide);
    //     }

    // });
    $scope.data_received = false;
    myutils.showWait();
    $http({
        method: 'GET',
        url: 'https://api.flickr.com/services/rest',
        params: {
            method: 'flickr.photosets.getPhotos',
            api_key: '5f1fc83583ecf2d1ba87d603691d3088',
            user_id: '142517182@N04',
            photoset_id: $scope.photosetid,
            format: 'json',
            nojsoncallback: 1
        }
    }).success(function(data) {
        $scope.results = data;

        for (var i = $scope.results.photoset.photo.length - 1; i >= 0; i--) {


            var slide = {
                src: 'https://farm' + $scope.results.photoset.photo[i].farm + '.static.flickr.com/' + $scope.results.photoset.photo[i].server + '/' + $scope.results.photoset.photo[i].id + '_' + $scope.results.photoset.photo[i].secret + '_h.jpg',
                pid: $scope.results.photoset.photo[i].id,
                thumb: 'https://farm' + $scope.results.photoset.photo[i].farm + '.static.flickr.com/' + $scope.results.photoset.photo[i].server + '/' + $scope.results.photoset.photo[i].id + '_' + $scope.results.photoset.photo[i].secret + '_s.jpg'
            };

            $scope.allslides.push(slide);
        }
        myutils.hideWait();

    }).error(function(error) {
        console.error(error);

    });
    
}]);

app.controller('AboutCtrl', ['$scope', '$http', '$stateParams', function($scope, $http, $stateParams) {
	
}]);
app.controller('ContactCtrl', ['$scope', '$http', '$stateParams', function($scope, $http, $stateParams) {
	
}]);
'use strict';
app.controller('PhotoLocationsCtrl', ['$scope', '$http', '$stateParams', '$window', 'FlickrService', function($scope, $http, $stateParams, $window, FlickrService) {
    $scope.markers = [];

    FlickrService.getAlbumLocation.then(function(data){
        $scope.markers = data;

        //https://farm{{picture.farm}}.static.flickr.com/{{picture.server}}/{{picture.primary}}_{{picture.secret}}_b.jpg
    });
     
    $scope.map = { center: { latitude: 54.080743, longitude: -2.482910 }, zoom: 6 };
    $scope.onClick = function(marker, eventName, model) {
        // console.log("Clicked!");
        // console.log(model);
        model.show = !model.show;
    };
}]);

(function () {
    app.controller('waitCtrl', waitCtrl);
    waitCtrl.$inject = ['$mdDialog', '$rootScope'];

    function waitCtrl($mdDialog, $rootScope) {
        var vm = this;
      $rootScope.$on("hide_wait", function (event, args) {
            $mdDialog.cancel();
        }); 
        

    }
})();
app.directive('mdLightbox', ['$mdDialog', 'myutils', function($mdDialog, myutils) {
    return {
        link: function($scope, elem, attrs) {

            elem.addClass('image-click');

            elem.on('click', function() {
                
                $scope.newIndex = 0;
                // console.log($scope.allslides);
                var image = attrs.src;
                var title = attrs.mdLightboxTitle;
                var index = Number(attrs.mdIndex);
                var allSlides = $scope.allslides;
                var maxSlides = $scope.allslides.length - 1;

                myutils.showWait();

                showLightboxModal(image, title, allSlides, maxSlides, index);


            });

            //Lightbox Modal
            function showLightboxModal(image, title, allSlides, maxSlides, index) {
                var confirm = $mdDialog.confirm({
                    templateUrl: 'views/lightbox.html',
                    clickOutsideToClose: true,
                    controller: lightboxController
                });
                console.log(allSlides);
                myutils.hideWait();

                setTimeout(function(){
                   $mdDialog.show(confirm);
                },5);
                

                function lightboxController($scope, $mdDialog) {
                    
                    $scope.image = image;
                    $scope.title = title;
                    $scope.newIndex= index;
                    $scope.lbSlides = allSlides;
                    $scope.maxSlides = maxSlides;


                    console.log(index);

                    $scope.cancel = function() {
                        $mdDialog.cancel();
                    };

                    $scope.nextTab = function() {

                        var test = ($scope.newIndex === $scope.maxSlides) ? 0 : Number($scope.newIndex) + 1;
                        $scope.newIndex = test;

                    };

                    $scope.prevTab = function() {

                        var test = ($scope.newIndex === $scope.maxSlides) ? 0 : Number($scope.newIndex) - 1;
                        $scope.newIndex = test;

                    };

                }

            }
        }
    }
}]);

angular.module('me-lazyload', [])
.directive('lazySrc', ['$window', '$document', function($window, $document){
    var doc = $document[0],
        body = doc.body,
        win = $window,
        $win = angular.element(win),
        uid = 0,
        elements = {};

    function getUid(el){
        var __uid = el.data("__uid");
        if (! __uid) {
            el.data("__uid", (__uid = '' + ++uid));
        }
        return __uid;
    }

    function getWindowOffset(){
        var t,
            pageXOffset = (typeof win.pageXOffset == 'number') ? win.pageXOffset : (((t = doc.documentElement) || (t = body.parentNode)) && typeof t.scrollLeft == 'number' ? t : body).scrollLeft,
            pageYOffset = (typeof win.pageYOffset == 'number') ? win.pageYOffset : (((t = doc.documentElement) || (t = body.parentNode)) && typeof t.scrollTop == 'number' ? t : body).scrollTop;
        return {
            offsetX: pageXOffset,
            offsetY: pageYOffset
        };
    }

    function isVisible(iElement){
        var elem = iElement[0],
            elemRect = elem.getBoundingClientRect(),
            windowOffset = getWindowOffset(),
            winOffsetX = windowOffset.offsetX,
            winOffsetY = windowOffset.offsetY,
            elemWidth = elemRect.width || elem.width,
            elemHeight = elemRect.height || elem.height,
            elemOffsetX = elemRect.left + winOffsetX,
            elemOffsetY = elemRect.top + winOffsetY,
            viewWidth = Math.max(doc.documentElement.clientWidth, win.innerWidth || 0),
            viewHeight = Math.max(doc.documentElement.clientHeight, win.innerHeight || 0),
            xVisible,
            yVisible;

        if(elemOffsetY <= winOffsetY){
            if(elemOffsetY + elemHeight >= winOffsetY){
                yVisible = true;
            }
        }else if(elemOffsetY >= winOffsetY){
            if(elemOffsetY <= winOffsetY + viewHeight){
                yVisible = true;
            }
        }

        if(elemOffsetX <= winOffsetX){
            if(elemOffsetX + elemWidth >= winOffsetX){
                xVisible = true;
            }
        }else if(elemOffsetX >= winOffsetX){
            if(elemOffsetX <= winOffsetX + viewWidth){
                xVisible = true;
            }
        }

        return xVisible && yVisible;
    }

    function checkImage(){
        angular.forEach(elements, function(obj, key) {
            var iElement = obj.iElement,
                $scope = obj.$scope;
            if(isVisible(iElement)){
              iElement.attr('src', $scope.lazySrc);
            }
        });
    }

    $win.bind('scroll', checkImage);
    $win.bind('resize', checkImage);

    function onLoad(){
        var $el = angular.element(this),
            uid = getUid($el);

        $el.css('opacity', 1);

        if(elements.hasOwnProperty(uid)){
            delete elements[uid];
        }
    }

    return {
        restrict: 'A',
        scope: {
            lazySrc: '@',
            animateVisible: '@',
            animateSpeed: '@'
        },
        link: function($scope, iElement){
            iElement.bind('load', onLoad);

            $scope.$watch('lazySrc', function(){
                var speed = "1s";
                if ($scope.animateSpeed != null) {
                    speed = $scope.animateSpeed;
                }
                if(isVisible(iElement)){
                    if ($scope.animateVisible) {
                        iElement.css({
                            'background-color': '#fff',
                            'opacity': 0,
                            '-webkit-transition': 'opacity ' + speed,
                            'transition': 'opacity ' + speed
                        });
                    }
                    iElement.attr('src', $scope.lazySrc);
                }else{
                    var uid = getUid(iElement);
                    iElement.css({
                        'background-color': '#fff',
                        'opacity': 0,
                        '-webkit-transition': 'opacity ' + speed,
                        'transition': 'opacity ' + speed
                    });
                    elements[uid] = {
                        iElement: iElement,
                        $scope: $scope
                    };
                }
            });

            $scope.$on('$destroy', function(){
                iElement.unbind('load');
                var uid = getUid(iElement);
                if(elements.hasOwnProperty(uid)){
                    delete elements[uid];
                }
            });
        }
    };
}]);
